name: CI/CD with Security Checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-and-security:
    runs-on: self-hosted runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # 1. Frontend linting (React/JavaScript)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend lint
        working-directory: ./frontend
        run: npm run lint

      # 2. Backend linting (Node.js)
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run backend lint
        working-directory: ./backend
        run: npm run lint

      # 3. SCA (Dependency vulnerability scanning) with GitHub's CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v2

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: lint-and-security

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push frontend Docker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/3-tier-frontend:latest ./frontend
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/3-tier-frontend:latest

      - name: Build and push backend Docker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/3-tier-backend:latest ./backend
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/3-tier-backend:latest

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Deploy to EKS
        run: |
          kubectl apply -f mongo/
          kubectl apply -f k8s_manifests/
